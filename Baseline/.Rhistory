main="Histogram of accident location on Georgia-Atlanta highway")
hist(locations, breaks=10,
xlab="Accident Location",
main="Histogram of accident location\non Georgia-Atlanta highway")
hist(locations, breaks=10,
xlab="Accident Location",
main="Histogram of accident location on\nGeorgia-Atlanta highway")
hist(locations, breaks=10,
xlab="Accident Location",
main="Histogram of accident location\non Georgia-Atlanta highway")
hist(locations, breaks=10,
xlab="Accident Location (km)",
ylab="Number of occurances"
main="Histogram of accident location\non Georgia-Atlanta highway")
hist(locations, breaks=10,
xlab="Accident Location (km)",
ylab="Number of occurances"
main="Histogram of accident location\non Georgia-Atlanta highway")
hist(locations, breaks=10,
xlab="Accident Location (km)",
ylab="Number of occurances",
main="Histogram of accident location\non Georgia-Atlanta highway")
ks.test(locations, function(x) dunif(x, min=0, max=100))
ks.test(locations, function(x) punif(x, min=0, max=100))
ks.test(locations, function(x) punif(x, min=0, max=100))
ks.test(locations, function(x) {punif(x, min=0, max=100)})
hist(locations, breaks=10,
xlab="Accident Location (km)",
ylab="Number of occurances",
main="Histogram of accident location\non Georgia-Atlanta highway")
hist(locations, breaks=10,
xlab="Accident Location (km)",
ylab="Number of occurances",
main="Histogram of accident location\non Georgia-Atlanta highway")
qqline(locations, distribution=function(x) qunif(x, min=0, max=100))
qqline(locations, distribution=function(x) qunif(x, min=0, max=100))
dev.off()
qqline(locations, distribution=function(x) qunif(x, min=0, max=100))
plot.new()
qqline(locations, distribution=function(x) qunif(x, min=0, max=100))
quantiles = c()
for i in 1:length(locations)
for (i in 1:length(locations))
{
quantiles = c(quantiles, sum(locations < locations[i]))
}
quantiles = c(quantiles, mean(locations < locations[i]))
{
quantiles = c(quantiles, mean(locations < locations[i]))
}
quantiles = c()
for (i in 1:length(locations))
{
quantiles = c(quantiles, mean(locations < locations[i]))
}
plot(locations, quantiles)
qqline(locations, distribution=function(x) qunif(x, min=0, max=100))
1:0.1:2
1:2:0.1
1:0.1:2
1:0.01:2
1:100:2
linspace(2, 10)
plot(locations, quantiles)
plot(seq(0, 100, 100), punif(seq(0, 100, 100), min=0, max=100))
plot(locations, quantiles)
plot(seq(0, 100, 100), punif(seq(0, 100, 100), min=0, max=100))
plot(locations, quantiles)
x = seq(from=0, to=100, length=100)
plot(x, punif(x, min=0, max=100))
plot(locations, quantiles)
x = seq(from=0, to=100, length=100)
plot(x, punif(x, min=0, max=100), type='l')
plot(x, punif(x, min=0, max=100), type='l', col='r')
plot(x, punif(x, min=0, max=100), type='l', col='red')
lines(x, punif(x, min=0, max=100), col='red')
plot(locations, quantiles)
x = seq(from=0, to=100, length=100)
lines(x, punif(x, min=0, max=100), col='red')
plot(locations, quantiles,
xlab="Accident Location (km)",
main="Empirical distribution of accidents vs uniform distribution")
x = seq(from=0, to=100, length=100)
lines(x, punif(x, min=0, max=100), col='red')
plot(locations, quantiles,
xlab="Accident Location (km)",
main="Empirical CDF of accidents vs uniform CDF")
x = seq(from=0, to=100, length=100)
lines(x, punif(x, min=0, max=100), col='red')
plot(locations, quantiles,
xlab="Accident Location (km)",
ylab="",
main="Empirical CDF of accidents vs uniform CDF")
x = seq(from=0, to=100, length=100)
lines(x, punif(x, min=0, max=100), col='red')
plot(locations, quantiles,
xlab="Accident Location (km)",
ylab="",
main="Empirical CDF of accidents vs uniform model")
x = seq(from=0, to=100, length=100)
lines(x, punif(x, min=0, max=100), col='red')
ks.test(locations, function(x) {punif(x, min=0, max=100)})
print("Test statistic: ", "hello")
print(paste("Test statistic: ", "hello"))
result = ks.test(locations, function(x) {punif(x, min=0, max=100)})
result = ks.test(locations, function(x) {punif(x, min=0, max=100)}); result
print(paste("Test statistic: ", result[["D"]]))
print(paste("Test statistic: ", result[["statistic"]], "\np-value: ", result[["p.value"]]))
print(paste("Test statistic: ", result[["statistic"]]))
print(paste("p-value: ", result[["p.value"]]))
require(ggplot2)
locations = c(88.3, 40.7, 36.3, 27.3, 36.8,
91.7, 67.3, 7.0, 45.2, 23.3,
98.8, 90.1, 17.2, 23.7, 97.4,
32.4, 87.8, 69.8, 62.6, 99.7,
20.6, 73.1, 21.6, 6.0, 45.3,
76.6, 73.2, 27.3, 87.6, 87.2)
hist(locations, breaks=10,
xlab="Accident Location (km)",
ylab="Number of occurances",
main="Histogram of accident location\non Georgia-Atlanta highway")
quantiles = c()
for (i in 1:length(locations))
{
quantiles = c(quantiles, mean(locations < locations[i]))
}
plot(locations, quantiles,
xlab="Accident Location (km)",
ylab="",
main="Empirical CDF of accidents vs uniform model")
x = seq(from=0, to=100, length=100)
lines(x, punif(x, min=0, max=100), col='red')
result = ks.test(locations, function(x) {punif(x, min=0, max=100)}); result
print(paste("Test statistic: ", result[["statistic"]]))
print(paste("p-value: ", result[["p.value"]]))
result = ks.test(locations, function(x) {punif(x, min=0, max=100)})
print(paste("Test statistic: ", result[["statistic"]]))
print(paste("p-value: ", result[["p.value"]]))
locations = c(88.3, 40.7, 36.3, 27.3, 36.8,
91.7, 67.3, 7.0, 45.2, 23.3,
98.8, 90.1, 17.2, 23.7, 97.4,
32.4, 87.8, 69.8, 62.6, 99.7,
20.6, 73.1, 21.6, 6.0, 45.3,
76.6, 73.2, 27.3, 87.6, 87.2)
hist(locations, breaks=10,
xlab="Accident Location (km)",
ylab="Number of occurances",
main="Histogram of accident location\non Georgia-Atlanta highway")
quantiles = c()
for (i in 1:length(locations))
{
quantiles = c(quantiles, mean(locations < locations[i]))
}
plot(locations, quantiles,
xlab="Accident Location (km)",
ylab="",
main="Empirical CDF of accidents vs uniform model")
x = seq(from=0, to=100, length=100)
lines(x, punif(x, min=0, max=100), col='red')
SEQ(0, 1, 100)
seq(0, 1, 100)
seq(0, 100, 1)
seq(0, 100)
plot(locations, quantiles,
xlab="Accident Location (km)",
ylab="",
main="Empirical CDF of accidents vs uniform model")
lines(seq(0, 100), punif(seq(0, 100), min=0, max=100), col='red')
hist(locations, breaks=10,
xlab="Accident Location (km)",
ylab="Number of occurances",
main="Histogram of accident location\non Georgia-Atlanta highway")
quantiles = c()
for (i in 1:length(locations))
{
quantiles = c(quantiles, mean(locations < locations[i]))
}
plot(locations, quantiles,
xlab="Accident Location (km)",
ylab="",
main="Empirical CDF of accidents vs uniform model")
lines(seq(0, 100), punif(seq(0, 100), min=0, max=100), col='red')
# Produce a histogram of the accident locations
hist(locations, breaks=10,
xlab="Accident Location (km)",
ylab="Number of occurances",
main="Histogram of accident location\non Georgia-Atlanta highway")
# We can make a plot of the empirical CDF versus that we would expect
# from an actual exponential distribution.
quantiles = c()
for (i in 1:length(locations))
{
quantiles = c(quantiles, mean(locations < locations[i]))
}
plot(locations, quantiles,
xlab="Accident Location (km)",
ylab="",
main="Empirical CDF of accidents vs uniform model")
lines(seq(0, 100), punif(seq(0, 100), min=0, max=100), col='red')
result = ks.test(locations, function(x) {punif(x, min=0, max=100)})
print(paste("Test statistic: ", result[["statistic"]]))
print(paste("p-value: ", result[["p.value"]]))
data <- c(0.65, 0.93, 0.39, 0.13, 0.14, 0.56, 0.50, 0.04, 0.45, 0.19,
0.61, 0.35, 0.25, 0.78, 0.16, 0.78, 0.04, 0.22, 0.36, 0.93)
ks.test(data, punif)
length(data)
acf(data)
acf(data, title="Autocorrelation of random numbers at lags up to 13")
acf(data, main="Autocorrelation of random numbers at lags up to 13")
acf(data, main="Autocorrelation of random numbers")
acf(data, main="Autocorrelation of random numbers", ylab="Autocorrelation")
acf(data,
main="Autocorrelation of random numbers", ylab="Autocorrelation")
acf(data,
main="Autocorrelation of random numbers", ylab="Autocorrelation",
ci.type="ma")
acf(data,
main="Autocorrelation of random numbers", ylab="Autocorrelation")
acf(data[1:-4],
main="Autocorrelation of random numbers", ylab="Autocorrelation")
acf(data[0:-4],
main="Autocorrelation of random numbers", ylab="Autocorrelation")
acf(data[0:-1],
main="Autocorrelation of random numbers", ylab="Autocorrelation")
acf(data,
main="Autocorrelation of random numbers", ylab="Autocorrelation")
acf(data[0:-5],
main="Autocorrelation of random numbers", ylab="Autocorrelation")
acf(data[0:-10],
main="Autocorrelation of random numbers", ylab="Autocorrelation")
acf(data,
main="Autocorrelation of random numbers", ylab="Autocorrelation")
plot(data)
plot(data, linetype='-')
plot(data, type='l')
plot(data, type='l', main="Plot of data series", ylabel="Value")
plot(data, type='l', main="Plot of data series", ylab="Value")
warnings()
plot(data, type='l', main="Plot of data series", ylab="Value")
acf(data,
main="Autocorrelation of random numbers", ylab="Autocorrelation")
plot(data, type='l', main="Plot of data series", ylab="Value")
grid()
data * data
data(0:-3) * data(3:)
data(0:-3) * data(3:-1)
data(0:-3) * data(3:length(data))
data(3:length(data))
data(0:-3) * data(3)
data(0:-3) * data[3]
data[3]
data(0:-3) * data[3:-1]
data[3:-1]
data[3:]
data[3:length(data)]
data[0:-3] * data[3:length(data)]
data[0:-3]
data[3:length(data)]
data[0:-3] * data[3::]
data[0:-3] * data[3:end]
length(data)
data
data[0:length(data)]
data[2:length(data)]
data[0:-3] * data[2:length(data)]
data[2:length(data)]
data[0:-3]
data
data[0:-1]
data[0:-2] * data[2:length(data)]
data[0:-2] * data[3:length(data)]
sum(data[0:-2] * data[3:length(data)])
sum(data[0:-2] * data[3:length(data)]) - 0.25
data[0:-2]
data
data[1:length(data)]
data
data[0:-2]
(sum(data[0:-3] * data[4:length(data)]) - 0.25)/18
sqrt(13*m+7)/(12*(m+1))
m = 17
sqrt(13*m+7)/(12*(m+1))
(sum(data[0:-3] * data[4:length(data)]) - 0.25)/18 / (sqrt(13*m+7)/(12*(m+1)))
pnorm((sum(data[0:-3] * data[4:length(data)]) - 0.25)/18 / (sqrt(13*m+7)/(12*(m+1))))
1 - pnorm((sum(data[0:-3] * data[4:length(data)]) - 0.25)/18 / (sqrt(13*m+7)/(12*(m+1))))
(sum(data[0:-3] * data[4:length(data)]) - 0.25)/18
(sum(data[0:-3] * data[4:length(data)]))/18 - 0.25
t
acf(data,
main="Autocorrelation of random numbers", ylab="Autocorrelation")
(sum((data[0:-3] - 0.5) * (data[4:length(data)] - 0.5))/18
)
sum((data[0:-3] - 0.5) * (data[4:length(data)] - 0.5))/18
sum((data[0:-3] - 0.5) * (data[4:length(data)] - 0.5))/18
x = acf(data)
x
(data[0:-3] - 0.5) * (data[4:length(data)] - 0.5)
data[4:length(data)]
(data[0:-3]) * (data[4:length(data)])
(data[0:-3]) * (data[4:length(data)]) - 0.25
sum((data[0:-3]) * (data[4:length(data)]) - 0.25)
sum((data[0:-3]) * (data[4:length(data)]) - 0.25)/18
sum((data[0:-3]) * (data[4:length(data)]) - 0.25)/18
sum((data[0:-3]) * (data[4:length(data)]) - 0.25)/18
(sum((data[0:-3]) * (data[4:length(data)]) - 0.25)/18)/0.25
(data[0:-3] - 0.5) * (data[4:length(data)] - 0.5)
(data[0:-3] - 0.5)
(data[4:length(data)] - 0.5)
data
data[4:length(data)]
data[0:-3]
data[1:length(data) - 3]
data[1:length(data)-3]
length(data)-3
data[1:(length(data)-3)]
data[4:length(data)]
sum((data[1:(length(data)-3)] - 0.5) * (data[4:length(data)] - 0.5))/18
sum((data[1:(length(data)-3)] - 0.5) * (data[4:length(data)] - 0.5))/18/0.25
sum(data[1:(length(data)-3)] * data[4:length(data)])/18
sum(data[1:(length(data)-3)] * data[4:length(data)])/18 - 0.25
(sum(data[1:(length(data)-3)] * data[4:length(data)])/18 - 0.25)/0.25
(sum(data[1:(length(data)-3)] * data[4:length(data)])/18 - 0.25)/0.5
(sum(data[1:(length(data)-3)] * data[4:length(data)])/17 - 0.25)/0.5
(sum(data[1:(length(data)-3)] * data[4:length(data)])/18 - 0.25)/0.5
(sum(data[1:(length(data)-3)] * data[4:length(data)])/18 - 0.25)/0.5
sqrt(13*m+7)/(12*(m+1))
sqrt(13*m+7)
data[1:(length(data)-3)]
(sum(data[1:(length(data)-3)] * data[4:length(data)])/18 - 0.25)/0.5
data <- c(0.12, 0.01, 0.23, 0.28, 0.89, 0.31, 0.64, 0.28, 0.83, 0.93,
0.99, 0.15, 0.33, 0.35, 0.91, 0.41, 0.60, 0.27, 0.75, 0.88,
0.68, 0.49, 0.05, 0.43, 0.95, 0.58, 0.19, 0.36, 0.69, 0.87)
acf(data,
main="Autocorrelation of random numbers", ylab="Autocorrelation")
(sum(data[1:(length(data)-3)] * data[4:length(data)])/17 - 0.25)/0.5
data <- c(0.65, 0.93, 0.39, 0.13, 0.14, 0.56, 0.50, 0.04, 0.45, 0.19,
0.61, 0.35, 0.25, 0.78, 0.16, 0.78, 0.04, 0.22, 0.36, 0.93)
acf(data,
main="Autocorrelation of random numbers", ylab="Autocorrelation")
x = acf(data)
x
data <- c(0.65, 0.93, 0.39, 0.13, 0.14, 0.56, 0.50, 0.04, 0.45, 0.19,
0.61, 0.35, 0.25, 0.78, 0.16, 0.78, 0.04, 0.22, 0.36, 0.93)
data <- c(0.12, 0.01, 0.23, 0.28, 0.89, 0.31, 0.64, 0.28, 0.83, 0.93,
0.99, 0.15, 0.33, 0.35, 0.91, 0.41, 0.60, 0.27, 0.75, 0.88,
0.68, 0.49, 0.05, 0.43, 0.95, 0.58, 0.19, 0.36, 0.69, 0.87)
x = acf(data)
data <- c(0.65, 0.93, 0.39, 0.13, 0.14, 0.56, 0.50, 0.04, 0.45, 0.19,
0.61, 0.35, 0.25, 0.78, 0.16, 0.78, 0.04, 0.22, 0.36, 0.93)
m = 19
sqrt(13*m+7)/(12*(m+1))
(sum(data[1:(length(data)-1)] * data[1:length(data)])/19 - 0.25)
data
data[1:length(data)]
(sum(data[1:(length(data)-1)] * data[2:length(data)])/19 - 0.25)
sqrt(13*m+7)/(12*(m+1))
(sum(data[1:(length(data)-1)] * data[2:length(data)])/19 - 0.25)/(sqrt(13*m+7)/(12*(m+1)))
(sum(data[1:(length(data)-1)] * data[2:length(data)])/19 - 0.25)
m = 18
sqrt(13*m+7)/(12*(m+1))
(sum(data[1:(length(data)-1)] * data[2:length(data)])/19 - 0.25)/(sqrt(13*m+7)/(12*(m+1)))
pnorm(-1.481)
pnorm(-1.481)*2
u <- runif(1000)
X = (6*(u-0.5)*(u < 0.5) + 4*sqrt(2*u-1) * (u >= 0.5))
x
u <- runif(10)
X = (6*(u-0.5)*(u < 0.5) + 4*sqrt(2*u-1) * (u >= 0.5))
x
X <- rep(0, num_samples)
num_samples <- 10
u <- runif(num_samples)
X <- rep(0, num_samples)
X[u < 0.5] = 6*(u[u<0.5] - 0.5)
X[u >= 0.5] = 4*sqrt(2*u[u>=0.5] - 1)
hist(X)
num_samples <- 1000
u <- runif(num_samples)
X <- rep(0, num_samples)
X[u < 0.5] = 6*(u[u<0.5] - 0.5)
X[u >= 0.5] = 4*sqrt(2*u[u>=0.5] - 1)
hist(X)
num_samples <- 10000
u <- runif(num_samples)
X <- rep(0, num_samples)
X[u < 0.5] = 6*(u[u<0.5] - 0.5)
X[u >= 0.5] = 4*sqrt(2*u[u>=0.5] - 1)
hist(X)
hist(X, main="Histogram of generated values")
num_samples <- 1000
u <- runif(num_samples)
X <- rep(0, num_samples)
X[u < 0.5] = 6*(u[u<0.5] - 0.5)
X[u >= 0.5] = 4*sqrt(2*u[u>=0.5] - 1)
hist(X, main="Histogram of generated values")
sim_job_average <- c(18.9, 22.0, 19.4, 22.1, 19.8, 21.9, 20.2)
mean(sim_job_average)
sd(sim_job_average)
t <- (mean(sim_job_average)- true_mean)/(sd(sim_job_average)/sqrt(length(sim_job_average)))
true_mean <- 22.5
t <- (mean(sim_job_average)- true_mean)/(sd(sim_job_average)/sqrt(length(sim_job_average)))
t
t.test(sim_job_average, mu=tru_mean)
t.test(sim_job_average, mu=true_mean)
data <- c(0.75, 2.5, 3.2, 0.95)
mean(data)
sd(data)
(1.19*3.182)/0.075
(1.19*3.182/0.75)
(1.19*3.182/0.75)^2
22.5 - 20.61
960/60
(22.5 - 20.61)/1.355
(22.5 - 20.61)/1.355/2
(0.9321 + 0.933 + 0.9243 + 0.8999)/4
pnorm
pnorm(0)
dnorm(0)
pnorm(0)
qnorm(0.05)
qnorm(0.1)
qnorm(0.95)
qnorm(0.975)
qnorm(0.99)
qnorm(0.995)
qt
qt(0.95)
qt(0.95, 1)
exit()
setwd("~/School/Waterloo/4B/STAT 435/Watberry/STAT-435/Baseline")
library(ggplot2)
data <- read.table("Baseline.csv", sep="\t", header=TRUE)
data$day <- data$daycount
data$hour <- data$partnum %/% 60
data$shift.day <- data$shift + (data$daycount-1)*3
head(data)
y300.mean <- mean(data$y300); y300.mean
y300.sd <- sd(data$y300); y300.sd
ci.halfwidth <- qnorm(0.975) * y300.sd / sqrt(length(data$y300))
y300.mean - ci.halfwidth; y300.mean + ci.halfwidth
y300.min <- min(data$y300); y300.min
y300.max <- max(data$y300); y300.max
num.outof.spec <- sum((data$y300 > 10) | (data$y300 < -10)); num.outof.spec
num.outof.spec/ length(data$y300)
# There was a lot of hourly variability from the multivari chart.
# We can check this with a linear model.
# We get an R-squared of 65%: 2/3 of variability can be explained by hour-to-hour
# (or on the scale of 4 hours) variation
hour.model <- lm(y300 ~ as.factor(hour), data)
summary(hour.model)
day.model <- lm(y300 ~ as.factor(day), data)
summary(day.model)
anova(day.model)
day.model <- lm(y300 ~ as.factor(day), data)
summary(day.model)
anova(day.model)
day.model <- lm(y300 ~ as.factor(day), data)
summary(day.model)
day.model <- lm(y300 ~ as.factor(day) + as.factor(hour), data)
summary(day.model)
# Boxplot by shift by day
plots.base + geom_boxplot(aes(y=y300, x=as.factor(shift.day))) +
xlab("Shift") + ylab("y300") +
ggtitle("Distribution of output variable y300 by shift (by day)")
# There was a lot of hourly variability from the multivari chart.
# We can check this with a linear model.
# We get an R-squared of 65%: 2/3 of variability can be explained by hour-to-hour
# (or on the scale of 4 hours) variation
hour.model <- lm(y300 ~ as.factor(hour), data)
# Boxplot by day
plots.base + geom_boxplot(aes(y=y300, x=as.factor(day))) +
xlab("Day") + ylab("y300") +
ggtitle("Distribution of output variable y300 by day")
# A base theme so all plots look consistent
plots.base <- ggplot(data=data) +
theme(plot.title=element_text(hjust=0.5, face="bold"),
axis.title=element_text(size=12)) +
geom_hline(yintercept=y300.min, color="#747474") +
geom_hline(yintercept=y300.max, color="#747474")
# Prep for the multivari plot
hours.df <- data.frame(hour=unique(data$hour))
hours.df$y300.avg <- sapply(hours.df$hour,
function(x){
return(mean(subset(data, hour==x)$y300))
})
# Boxplot by day
plots.base + geom_boxplot(aes(y=y300, x=as.factor(day))) +
xlab("Day") + ylab("y300") +
ggtitle("Distribution of output variable y300 by day")
# Boxplot by shift by day
plots.base + geom_boxplot(aes(y=y300, x=as.factor(shift.day))) +
xlab("Shift") + ylab("y300") +
ggtitle("Distribution of output variable y300 by shift (by day)")
# Boxplot by hour
plots.base + geom_boxplot(aes(y=y300, x=as.factor(hour))) +
xlab("Hour") + ylab("y300") +
ggtitle("Distribution of output variable y300 by hour")
anova(y300 ~ as.factor(hour) + as.factor(day), data=data)
aov(y300 ~ as.factor(hour) + as.factor(day), data=data)
anova(lm(y300 ~ as.factor(hour) + as.factor(day), data=data))
anova(lm(y300 ~ as.factor(hour) + as.factor(hour):as.factor(day), data=data))
anova(lm(y300 ~ as.factor(hour) + as.factor(day), data=data))
anova(lm(y300 ~ as.factor(day), data=data))
anova(lm(y300 ~ as.factor(hour) + as.factor(day), data=data))
# Boxplot by shift
plots.base + geom_boxplot(aes(y=y300, x=as.factor(shift))) +
xlab("Shift") + ylab("y300") +
ggtitle("Distribution of output variable y300 by shift")
# Boxplot by shift by day
plots.base + geom_boxplot(aes(y=y300, x=as.factor(shift.day))) +
xlab("Shift") + ylab("y300") +
ggtitle("Distribution of output variable y300 by shift (by day)")
